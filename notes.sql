CREATE TABLE DEVELOPERS
(
  DEVELOPER_ID   INTEGER,
  DEVELOPER_NAME VARCHAR(20) NOT NULL,
  DEVELOPER_TYPE VARCHAR(20),
  SALARY         INTEGER     NOT NULL,
  CONSTRAINT DEVELOPER_ID_PK PRIMARY KEY (DEVELOPER_ID)
);

INSERT INTO DEVELOPERS (DEVELOPER_ID, DEVELOPER_NAME, SALARY)
VALUES (1, 'Bill', 0);

TRUNCATE TABLE DEVELOPERS;

INSERT INTO DEVELOPERS (DEVELOPER_ID, DEVELOPER_NAME, DEVELOPER_TYPE, SALARY)
VALUES (1, 'Bill', 'Frontend', 80000),
  (2, 'Harry', 'Backend', 90000),
  (3, 'Joe', 'Full Stack', 105000),
  (4, 'Michael', 'Frontend', 75000),
  (5, 'Sarah', 'Full Stack', 10000),
  (6, 'Oliver', 'Backend', 95000),
  (7, 'Sophia', 'Backend', 85000),
  (8, 'Richard', 'Full Stack', 110000);

SELECT *
FROM DEVELOPERS;

SELECT
  DEVELOPER_TYPE,
  COUNT(*)
FROM DEVELOPERS
GROUP BY DEVELOPER_TYPE
ORDER BY 2 DESC;

CREATE TABLE LANGUAGES
(
  LANGUAGE_NAME VARCHAR(20) PRIMARY KEY
);

INSERT INTO LANGUAGES
VALUES ('C'), ('Java'), ('Ruby'), ('Python'), ('JavaScript');

CREATE TABLE DEVELOPER_LANGUAGES
(
  DEVELOPER_ID  INTEGER REFERENCES DEVELOPERS (DEVELOPER_ID),
  LANGUAGE_NAME VARCHAR(20) REFERENCES LANGUAGES (LANGUAGE_NAME)
);

INSERT INTO DEVELOPER_LANGUAGES
VALUES (1, 'JavaScript'), (2, 'C'), (2, 'Java'), (3, 'Ruby'), (3, 'JavaScript'), (4, 'JavaScript'), (5, 'Python'),
  (5, 'JavaScript'), (6, 'Java'), (7, 'Java'), (8, 'Ruby'), (8, 'Python'), (8, 'JavaScript');

SELECT
  DEVELOPER_NAME,
  LANGUAGE_NAME
FROM DEVELOPERS
  JOIN DEVELOPER_LANGUAGES
    ON DEVELOPERS.DEVELOPER_ID = DEVELOPER_LANGUAGES.DEVELOPER_ID;

SELECT DEVELOPER_NAME Rubyists
FROM DEVELOPERS
  NATURAL JOIN DEVELOPER_LANGUAGES
WHERE LANGUAGE_NAME = 'Ruby';

CREATE TABLE PROJECTS
(
  PROJECT_ID   INTEGER PRIMARY KEY AUTO_INCREMENT,
  PROJECT_NAME VARCHAR(20)
);

ALTER TABLE PROJECTS
  DROP COLUMN PROJECT_NAME;

ALTER TABLE PROJECTS
  ADD COLUMN PROJECT_NAME VARCHAR(30);

DESC PROJECTS;

INSERT INTO PROJECTS (PROJECT_NAME)
VALUES ('Website'),
  ('Payment System'),
  ('CRM'),
  ('Desktop Application'),
  ('Mainframe Application'),
  ('Legacy System');

DELETE FROM PROJECTS
WHERE PROJECTS.PROJECT_NAME = 'Mainframe Application';

# Treat || as a string concatenation operator
SET sql_mode = 'PIPES_AS_CONCAT';

UPDATE PROJECTS
SET PROJECTS.PROJECT_NAME = 'Mobile' || ' ' || 'Application'
WHERE PROJECTS.PROJECT_NAME = 'Desktop Application';

START TRANSACTION;

INSERT INTO PROJECTS (PROJECT_NAME)
VALUES ('Temp Project');

ROLLBACK;

COMMIT WORK;

SELECT
  PROJECT_ID,
  PROJECTS.PROJECT_NAME
FROM PROJECTS
ORDER BY PROJECT_ID ASC, PROJECTS.PROJECT_NAME DESC
LIMIT 100;

CREATE TABLE DEVELOPER_ASSIGNMENTS
(
  DEVELOPER_ID INTEGER REFERENCES DEVELOPERS (DEVELOPER_ID),
  PROJECT_ID   INTEGER,
  STARTED_AT   TIME,
  CONSTRAINT FOREIGN KEY (PROJECT_ID) REFERENCES PROJECTS (PROJECT_ID)
);

INSERT INTO DEVELOPER_ASSIGNMENTS (DEVELOPER_ID, PROJECT_ID, STARTED_AT)
VALUES (1, 1, DATE_SUB(NOW(), INTERVAL 1 HOUR)),
  (2, 2, DATE_SUB(NOW(), INTERVAL 5 HOUR)),
  (3, 2, DATE_SUB(NOW(), INTERVAL 5 HOUR)),
  (4, 3, DATE_SUB(NOW(), INTERVAL 6 HOUR)),
  (5, 3, DATE_SUB(NOW(), INTERVAL 6 HOUR)),
  (6, 3, DATE_SUB(NOW(), INTERVAL 7 HOUR)),
  (7, 4, DATE_SUB(NOW(), INTERVAL 3 HOUR)),
  (8, 4, DATE_SUB(NOW(), INTERVAL 3 HOUR));

SELECT
  DEVELOPER_NAME,
  PROJECT_NAME,
  STARTED_AT
FROM
  DEVELOPERS
  NATURAL JOIN DEVELOPER_ASSIGNMENTS
  JOIN PROJECTS USING (PROJECT_ID);

SELECT
  DEVELOPER_NAME "MAX & Co",
  SALARY
FROM DEVELOPERS
WHERE SALARY = (SELECT MAX(SALARY)
                FROM DEVELOPERS)
UNION
SELECT
  DEVELOPER_NAME,
  SALARY
FROM DEVELOPERS
WHERE DEVELOPER_NAME IN ('Bill', 'Harry')
ORDER BY 2;

SELECT
  PROJECT_NAME,
  COUNT(DA.PROJECT_ID) DEVELOIPERS_ASSIGNED
FROM PROJECTS
  LEFT JOIN DEVELOPER_ASSIGNMENTS DA USING (PROJECT_ID)
GROUP BY PROJECT_NAME
ORDER BY DEVELOIPERS_ASSIGNED DESC;

SELECT
  D.DEVELOPER_NAME,
  D.DEVELOPER_TYPE,
  D.SALARY
FROM DEVELOPERS D
WHERE D.SALARY > (SELECT AVG(SALARY)
                  FROM DEVELOPERS
                  WHERE DEVELOPER_TYPE = D.DEVELOPER_TYPE);

SELECT 42;
